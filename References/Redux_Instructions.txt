Redux Instructions
====
Step 0: 
  npm i redux react-redux 

  redux  - core redux framework 
  react-redux   -- patches up react with redux seamlessy 

Step 1: 
  In src/index.js Setup the the Redux Store here
  import { createStore } from 'redux'; 

Step 2: 
  Exec createStore() method and save it in a variable 
  const store = createStore(); //this needs a special argument called 'reducer'

Step 3:
  [Refer reducers/contactReducer.js]  Setup Reducer for the store
  // Reducer
  /*
  What's a Reducer?
    It is a function that takes the current state and 
    an action that was dispatched as it’s parameters and returns the new state.
  */

  // Setting up contactReducer so that
  // we can combine this reducer with other reducers later 
  // and make a big object for the store 
  // reducer should mandatorily return a state. 
  const contactReducer = (state = [], action) => { 
    // action.type will be there mandatorily 
    
    switch(action.type) {  
      case 'ADD_CONTACT':
        return state.concat([action.data]);
      default:
        return state;
    }
  }
  export default contactReducer;

Step 4: 
// work on combining all reducers for the entire app
// and have the following code 

//Step 4.1: Combining Reducers using Redux's combineReducers
import {combineReducers} from 'redux';

//Step 4.2 loading all reducers
import contactReducer from './contactReducer'; 

//Step 4.3 combine all reducers into one big object for store
const rootReducers = combineReducers({
  contacts: contactReducer
});

//Step 4.4 exporing the rootReducer -- that is the combined reducer
export default rootReducers;

==========

Step 5: in src/index.js, Setup reducer for the store
  //let’s import the combineReducer 
  //and pass it to the store as an argument.
  
  import rootReducers from './reducers'; 
  const store = createStore(rootReducers); 

========

Step 6: In src/index.js, inside the ReactDOM.render() block,
Provide the store data to the entire app 
  
  For the following to work.. 
  import { Provider } from 'react-redux'; 

  //Definition: The Provider component uses something 
    //called as React Context which allows you to pass the 
    //store object to any components 
    //that needs to access it without the need to pass props.
    //Provider should be imported from react-redux 
  
  ReactDOM.render(
    <React.StrictMode>
      <Provider store={store}>   { /* this is how we have to provide store data to the app */ }
        <App />
      </Provider>
    </React.StrictMode>
  ,
  document.getElementById('root')
);

=======


Step 7:
  create actions/types.js file for the various actions of the app's feature 
  have the following code in it.

  export const ADD_CONTACT = 'ADD_CONTACT';
  export const GET_CONTACTS = 'GET_CONTACTS';
  export const GET_CONTACT_BY_ID = 'GET_CONTACT_BY_ID';
  export const EDIT_CONTACT = 'EDIT_CONTACT';
  export const DELETE_CONTACT = 'DELETE_CONTACT';

====



Step 8:
  Have reducers/CONTACTReducer.js to have better switch case statement 
  with much more scalable code by using the action types 

  import { ADD_CONTACT, GET_CONTACTS, EDIT_CONTACT, DELETE_CONTACT } from "../actions/types";
    
  const CONTACTReducer = (state = [], action) => {
    // Step 8.1 
      //now it is time to understand the concept called 'Actions'
      //What are Actions? 
        //Actions are plain Javascript objects with a type property. 
        //This type property describes the event that is taking place 
        //in the application.
    switch(action.type) {
      case ADD_CONTACT:
        //Step 8.2 - clarification - of the following code, 
        //action.type = Event and action.data = Form Data from Add CONTACT
        return state.concat([action.data]);
      case GET_CONTACTS: 
        return state; // not implemented yet
      case GET_CONTACT_BY_ID: 
        return state; // not implemented yet
      case EDIT_CONTACT: 
        return state;  // not implemented yet
      case DELETE_CONTACT:
        return state.filter((CONTACT)=>CONTACT.id !== action.id);
      default:
        return state;
    }
  }

====


Step 9 & Step 10:
===
import React, { Component } from 'react';
// Step 10: 
import {connect} from 'react-redux';

//Step 9:
  // Almost  done... 
  // to dispatch action, let's write form submit logic 

class ContactForm extends Component {

  // Step 9.2 then, work on addContactHandler method 
  addContactHandler = (e) => {
    e.preventDefault();

    // making the payload ready
    const contactFormData = {
      name: this.getName.value,
      email: this.getEmail.value,
      phone: this.getPhone.value
    }

    console.log(contactFormData);
  }

  render() {
    return (
      // Step 9.1
      // form code can be  the following with ref's and submission logic 
      <div>
        <div className='container text-left'>
          <div className='row'>
            <div className='col-md-12'>
              <h3>Create Contact!</h3>
              <form onSubmit={this.addContactHandler}>
                <input required type="text"
                  placeholder="Enter Name"
                  className='form-control' 
                  ref={(input) => this.getName = input } /><br />
                <input required type="text"
                  placeholder="Enter EMail"
                  className='form-control'
                  ref={(input) => this.getEmail = input } /><br />

                <input required type="text"
                  placeholder="Enter Phone"
                  className='form-control'
                  ref={(input) => this.getPhone = input }/><br />
                <button className='btn btn-primary' 
                type='submit' 
              >Add Contact</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

// Step 10.1
//last line of the component should be the following. 
// after connecting props will be available in this component. 
export default connect()(ContactForm);

=========

Step11:
===
  It is time to dispatch events from form submission logic 
  // connect() helps props have dispatch method
  // using it we can dispatch action with type and data (payload)
  so, inside the addContactHandler logic, have a console.log(this.props);
  
  addContactHandler = (e) => {
    e.preventDefault();

    // making the payload ready
    const contactFormData = {
      name: this.getName.value,
      email: this.getEmail.value,
      phone: this.getPhone.value
    }

    console.log(contactFormData);

    console.log(this.props);  // Step 11: props exists because of connect method
    
  }
=====

Step12:
===
// Step 12  -- create services/contctService.js 
// ajax 
// api end point - http://jsonplaceholder.typicode.com/users
// http method -- POST
// payload - form data
// thru what tool? -- HTTPClient -- Axios

import axios from 'axios';
import { ADD_CONTACT } from "../actions/types";

const CONTACTS_API_URL = 'https://jsonplaceholder.typicode.com/users';

export const createContact = (data) => {
  console.log(data);
  return (dispatch) => {
    console.log(dispatch);
    return axios.post(CONTACTS_API_URL, data )
      .then(response => {
        console.log(dispatch);
          console.log('Submission SUCCESS');
          
      })
      .catch(error => {
          throw (error);
      })
      .finally( () => {
        console.log('Add Contact service call is over');
      }) 
  }
}

                      
==========
Step 13: 
  Dispatch the action in ContactForm.js submission logic

  import { createContact } from '../../services/contactService';

  // Step 9.2 then, work on addContactHandler method 
  addContactHandler = (e) => {
    e.preventDefault();

    // making the payload ready
    const contactFormData = {
      name: this.getName.value,
      email: this.getEmail.value,
      phone: this.getPhone.value
    }

    console.log(contactFormData);

    console.log(this.props);  // Step 11: props exists because of connect method
    // Step 13: dispatch method will be in the above props 
    this.props.dispatch(createContact( contactFormData )); // this is the service method
  }
=======

Step 14: 
  Check the error in console and fix it..
  The error says...
  Uncaught Error: Actions must be plain objects. 
  Use custom middleware for async actions.

  // Step 14.1
  install the following packages.
    npm i redux-logger redux-thunk
  
  // Step 14.2
  then, go to src/index.js 
    import logger from 'redux-logger'; // npm i redux-logger 
    import thunk from 'redux-thunk';  //npm i redux-thunk

  // step 14.3
  use redux-thunk middleware for async actions
    import { createStore, applyMiddleware } from 'redux';
  
    const store = createStore( rootReducers, applyMiddleware(thunk, logger) );

Step 15: 
=====
  in service, success logic have the following dispatch 

   dispatch({
      type: ADD_CONTACT,
      payload: {
        id: response.data.id,
        name: response.data.name,
        email: response.data.email,
        phone: response.data.phone
      }
    });

===
Step 16: 
  Check the app.. try creating a blog post.. it should work well. 
  we should be able to create a blog post.  (POST method is over)

  Create blog post operation is over. 
  Now, let's work on Listing Blog posts (Read operation)

====
Step 17: 
  in ContatList.js, let's get the state data from the store and 
  convert them into read-only props. 
  Redux's core purpose is to get rid of state across the app and make it props. 

  // Step 16.1
    import { connect } from 'react-redux';

  // Step 16.2
  to get the state and to convert that to props 
  in the ContatList.js file, make the following change in the export.

    export default connect(mapStateToProps)(PostList);
  
  //mapStateToProps() method should be defined in the same file before the export
  
    const mapStateToProps = (state) => {
      return {
          posts: state.posts
      }
    } 
  
  The above function will convert state to props for the PostList compoent.
  By doing the above this comp will no longer have state. 

====

Step 18:
====
  Now, let's think about getting all contacts on load 
  
  Note: 
  if the contacts list should be loaded for the home page to display...
  then, in src/index.js we have to write logic to load contacts at first.

    import { getContacts } from './services/contactsService';
    
    //To Setup Initial Loading -- for diplaying something at first load -- from rest api call
    store.dispatch(getContacts());

  ------ 
  But, our home page url should not show the all contacts. But contacts url.
  So, we have to now dispatch an action to getContacts in ContactList.js 
    import { getContacts } from './services/contactsService';

  Then, Inside the life cycle hook, 

    componentDidMount(){
      // send ajax calls to load all posts..
      // dispatch event 
      this.props.dispatch(getContacts());
    }



========
Step 19: 
----
Complete the logic in contactSetvice.js

// GET CONTACTS
export const getContacts = () => {
  // work with axios 
  return (dispatch) => {
    return axios.get(CONTACTS_API_URL )
      .then(response => {
        console.log(response);
        dispatch({
          type: GET_CONTACTS,
          contact: response.data
        })
      })
      .catch( (error) => {
         throw (error);
      })
      .finally( () => {
        console.log('It is over');
      })
  }
}

===

Step 20: 
----
After dispatching the action with type and payload, it will hit contactsReducer.js 
have the following logic there..

case GET_CONTACTS: 
      return action.payload; 

 Check the app! The app should display all posts on load. 
  Read operation is also over. (GET method)
===

Step 21:
-------
  Let's work on another GET
  getContactById 

  in contactService.js 

    //Initial Load to get post by id
    export const getContactById = (contactId) => {
      return (dispatch) => {
        return axios.get(POSTS_API_URL+'/'+contactId)
          .then(response => {
            //without util method, you can try like the following
            // this will hit the postReducer
            dispatch({
              type: GET_CONTACT_BY_ID,
              post: response.data
            })
          })
          .catch(error => {
            throw(error);
          });
      };
    };

===
Step 22: 
  In PostDetails.js, in its life cycle hook 

  componentDidMount(){
    // Step 22.1 read url parameter in react -- it is available in props
    console.log(this.props.match.params.id);
    // Step 22.2 passing the url param to getPostById() method
    this.props.dispatch(getPostById(this.props.match.params.id)); 
  }

====
Step 23: 
  And in postReducer.js 
  inside switch case... make a correction like the following

  case GET_POST_BY_ID: 
      return action.post; 

Step 24: 
  Then, to get the data as props in PostDetails.js,
  import { connect } from 'react-redux';

  And also have the following code

  const mapStateToProps = (state) => {
    // it is from state.posts 
    // not from state.post because of the way it is mentioned in combined reducer
    return {
        post: state.posts 
    }
  }

  export default connect(mapStateToProps)(PostDetails);

=====
Step 25: 
  Inside render() method of PostDetails.js,
    render() {
      console.log(this.props);
      return (
        <div className='container'>
          <h1>Post Details</h1>
          <div className="list-group">
            <div className="list-group-item">
              <div className="d-flex w-100 justify-content-between">
                <h5 className="mb-1">{this.props.post.title}</h5>
                <small>Post Id: {this.props.post.id}</small>
              </div>
              <p className="mb-1">
                {this.props.post.body}
              </p>
              <small>UserId: {this.props.post.userId}</small>
              <br />
              <button className='btn btn-primary' >Edit</button> &nbsp;
              <button className='btn btn-danger'>Delete</button>
            </div>
          </div>
        </div>
      );
    }

Step 26: 
  Check the app! Get Post details will also work fine. 
  So another GET is over. 
  We can work on Update / Delete Post  

Step 27: 
  Now, Let's work on delete. We'll work on update later.
  In PostDetails.js,

  // Step 27.1
  import { getPostById, deletePost } from '../../services/postService';

  // Step 27.2
  deleteHandler = () => {
    this.props.dispatch(deletePost(this.props.post.id));
  }

  // Step 27.3
  <button className='btn btn-danger' onClick={this.deleteHandler}>Delete</button>

Step 28: 
  Then, work on postService.js

  add a new method there..

    //Delete Post by postId
    export const deletePost = (postId) => {
      return (dispatch) => {
        return axios.delete(POSTS_API_URL+'/'+postId)
          .then(response => {
            //without util method, you can try like the following
            // this will hit the postReducer
            dispatch({
              type: DELETE_POST,
              post: response.data
            })
          })
          .catch(error => {
            throw(error);
          });
      };
    };

Step 29: 
  In switch case of postReducer.js 

    case DELETE_POST:
      return action.post;

  That's it.. Check the app! delete will also work. 
  The data from the backend is wrong.. 
  because of it our app doesn't work well for delete action. 

  we have filter the items from postReducer's switch case... 

===
Step 30: 
  We have to work on update operation. 

  In PostDetails.js,
  have the edit button to open bootstrap modal
    <button className='btn btn-primary' 
    data-toggle='modal' 
    data-target='#editModal'>Edit</button> &nbsp;

  And have the modal code,
  <div className="modal fade" id="editModal"
      tabIndex={-1}
      role="dialog"
      aria-labelledby="exampleModalLabel"
      aria-hidden="true">
      <div className="modal-dialog" role="document">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title" id="exampleModalLabel">
              Update Post
            </h5>
            <button
              type="button"
              className="close"
              data-dismiss="modal"
              aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
          <div className="modal-body">
            <form onSubmit={this.handleSubmit}>
              <input required type="text"
                placeholder="Enter Post Title"
                className='form-control' 
                defaultValue={this.props.post.title} 
                ref={(input) => this.getTitle = input} /><br />
              <textarea required rows="5" cols="28"
                placeholder="Enter Post" 
                className='form-control'
                defaultValue={this.props.post.body} 
                ref={(input) => this.getContent = input} /><br />
              <button className='btn btn-primary' type='submit'>Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

Step 31: 
  Define handleSubmit function there and capture the form data,
  then dispatch ac action to editPost 
    handleSubmit = (e) => {
      e.preventDefault();
      const title = this.getTitle.value;
      const body = this.getContent.value;
      const data = {
        id: this.props.post.id,
        title,
        body
      }
      console.log(data);
      
      this.props.dispatch(editPost( data ));
      this.getTitle.value = '';
      this.getContent.value = '';
    }

Step 32: 
  For the above to work, define editPost method in postService.js
    //Update post
    export const editPost = (data) => {
      return (dispatch) => {
        return axios.put(POSTS_API_URL+'/'+data.id, data )
          .then(response => {
            dispatch({
              type: EDIT_POST,
              post: response.data
            })
          })
          .catch(error => {
              throw (error);
          });
      };
    };

Step 33: Finally, work with the switch case in postReducer.js 
  case EDIT_POST: 
      return action.post;

That's all. CRUD Operation is over!

Note: Add Toastr (react-redux-toastr )

Other Important Notes:
1) How to Include Bootstrap in React App?
    npm i bootstrap --save 
    then,
    in index.js 
    import 'bootstrap/dist/css/bootstrap.css'

2) Debugging (Writing debuggable code)
  Use redux dev tools extension
  Read the doc and config the app to use the extension.
  you can configure it for production also.

3) Working with action creators
  // we can create custom event handlers -- they will be available in props
  const mapDispatchToProps = dispatch => {
    return {
      onDelete: id => {
        dispatch(deletePost(id));
      }
    };
  };

  export default connect(mapStateToProps, mapDispatchToProps)(PostList);

4) Webpack and it's config 
  npm run eject


